This file is a merged representation of the entire codebase, combining all repository files into a single document.
Generated by Repopack on: 2024-10-20T17:58:32.831Z

<file_summary>
This section contains a summary of this file.

<purpose>
This file contains a packed representation of the entire repository's contents.
It is designed to be easily consumable by AI systems for analysis, code review,
or other automated processes.
</purpose>

<file_format>
The content is organized as follows:
1. This summary section
2. Repository information
3. Repository structure
4. Repository files, each consisting of:
  - File path as an attribute
  - Full contents of the file
</file_format>

<usage_guidelines>
- This file should be treated as read-only. Any changes should be made to the
  original repository files, not this packed version.
- When processing this file, use the file path to distinguish
  between different files in the repository.
- Be aware that this file may contain sensitive information. Handle it with
  the same level of security as you would the original repository.
</usage_guidelines>

<notes>
- Some files may have been excluded based on .gitignore rules and Repopack's
  configuration.
- Binary files are not included in this packed representation. Please refer to
  the Repository Structure section for a complete list of file paths, including
  binary files.
</notes>

<additional_info>

For more information about Repopack, visit: https://github.com/yamadashy/repopack
</additional_info>

</file_summary>

<repository_structure>
.editorconfig
.gitignore
.prettierrc.json
.repopackignore
e2e/tsconfig.json
e2e/vue.spec.ts
env.d.ts
eslint.config.js
index.html
package.json
playwright.config.ts
README.md
repopack.config.json
src/App.vue
src/assets/base.css
src/assets/logo.svg
src/assets/main.scss
src/components/__tests__/HelloWorld.spec.ts
src/components/__tests__/RegistrationForm.spec.ts
src/components/__tests__/UsersTable.spec.ts
src/components/__tests__/WinnersBlock.spec.ts
src/components/HelloWorld.vue
src/components/icons/IconCommunity.vue
src/components/icons/IconDocumentation.vue
src/components/icons/IconEcosystem.vue
src/components/icons/IconSupport.vue
src/components/icons/IconTooling.vue
src/components/RegistrationForm.vue
src/components/TheWelcome.vue
src/components/UsersTable.vue
src/components/WelcomeItem.vue
src/components/WinnersBlock.vue
src/main.ts
src/models/User.ts
src/stores/counter.ts
src/validations/UserValidations.ts
tsconfig.app.json
tsconfig.json
tsconfig.node.json
tsconfig.vitest.json
vite.config.ts
vitest-setup.ts
vitest.config.ts
</repository_structure>

<repository_files>
This section contains the contents of the repository's files.

<file path=".editorconfig">
[*.{js,jsx,mjs,cjs,ts,tsx,mts,cts,vue}]
charset = utf-8
indent_size = 2
indent_style = space
insert_final_newline = true
trim_trailing_whitespace = true
</file>

<file path=".gitignore">
# Logs
logs
*.log
npm-debug.log*
yarn-debug.log*
yarn-error.log*
pnpm-debug.log*
lerna-debug.log*

node_modules
.DS_Store
dist
dist-ssr
coverage
*.local

/cypress/videos/
/cypress/screenshots/

# Editor directories and files
.vscode/*
!.vscode/extensions.json
.idea
*.suo
*.ntvs*
*.njsproj
*.sln
*.sw?

*.tsbuildinfo

test-results/
playwright-report/
</file>

<file path=".prettierrc.json">
{
  "$schema": "https://json.schemastore.org/prettierrc",
  "semi": false,
  "singleQuote": true,
  "arrowParens": "avoid"
}
</file>

<file path=".repopackignore">
# Add patterns to ignore here, one per line
# Example:
# *.log
# tmp/
</file>

<file path="e2e/tsconfig.json">
{
  "extends": "@tsconfig/node20/tsconfig.json",
  "include": ["./**/*"]
}
</file>

<file path="e2e/vue.spec.ts">
import { test, expect } from '@playwright/test';

// See here how to get started:
// https://playwright.dev/docs/intro
test('visits the app root url', async ({ page }) => {
  await page.goto('/');
  await expect(page.locator('div.greetings > h1')).toHaveText('You did it!');
})
</file>

<file path="env.d.ts">
/// <reference types="vite/client" />
</file>

<file path="eslint.config.js">
import pluginVue from 'eslint-plugin-vue'
import vueTsEslintConfig from '@vue/eslint-config-typescript'
import pluginVitest from '@vitest/eslint-plugin'
import pluginPlaywright from 'eslint-plugin-playwright'
import skipFormatting from '@vue/eslint-config-prettier/skip-formatting'
import pluginJestDom from 'eslint-plugin-jest-dom'
import pluginTestingLibrary from 'eslint-plugin-testing-library'

export default [
  {
    name: 'app/files-to-lint',
    files: ['**/*.{ts,mts,tsx,vue}'],
  },

  {
    name: 'app/files-to-ignore',
    ignores: ['**/dist/**', '**/dist-ssr/**', '**/coverage/**'],
  },

  ...pluginVue.configs['flat/essential'],
  ...vueTsEslintConfig(),

  {
    ...pluginVitest.configs.recommended,
    files: ['src/**/__tests__/*'],
  },

  {
    ...pluginPlaywright.configs['flat/recommended'],
    files: ['e2e/**/*.{test,spec}.{js,ts,jsx,tsx}'],
  },

  {
    files: ['src/**/__tests__/*'],
    ...pluginTestingLibrary.configs['flat/vue'],
  },

  {
    files: ['src/**/__tests__/*'],
    ...pluginJestDom.configs['flat/recommended'],
  },
  skipFormatting,
]
</file>

<file path="index.html">
<!DOCTYPE html>
<html lang="en">
  <head>
    <meta charset="UTF-8">
    <link rel="icon" href="/favicon.ico">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Vite App</title>
  </head>
  <body>
    <div id="app"></div>
    <script type="module" src="/src/main.ts"></script>
  </body>
</html>
</file>

<file path="package.json">
{
  "name": "vue-lottery-app",
  "version": "0.0.0",
  "private": true,
  "type": "module",
  "scripts": {
    "dev": "vite",
    "build": "run-p type-check \"build-only {@}\" --",
    "preview": "vite preview",
    "test:unit": "vitest",
    "test:e2e": "playwright test",
    "build-only": "vite build",
    "type-check": "vue-tsc --build --force",
    "lint": "eslint . --fix",
    "format": "prettier --write src/"
  },
  "dependencies": {
    "bootstrap": "^5.3.3",
    "pinia": "^2.2.4",
    "vue": "^3.5.12"
  },
  "devDependencies": {
    "@playwright/test": "^1.48.0",
    "@testing-library/jest-dom": "^6.6.2",
    "@testing-library/user-event": "^14.5.2",
    "@testing-library/vue": "^8.1.0",
    "@tsconfig/node20": "^20.1.4",
    "@types/jsdom": "^21.1.7",
    "@types/node": "^20.16.11",
    "@vitejs/plugin-vue": "^5.1.4",
    "@vitest/eslint-plugin": "1.1.7",
    "@vue/eslint-config-prettier": "^10.0.0",
    "@vue/eslint-config-typescript": "^14.0.1",
    "@vue/test-utils": "^2.4.6",
    "@vue/tsconfig": "^0.5.1",
    "eslint": "^9.12.0",
    "eslint-plugin-jest-dom": "^5.4.0",
    "eslint-plugin-playwright": "^1.7.0",
    "eslint-plugin-testing-library": "^6.4.0",
    "eslint-plugin-vue": "^9.29.0",
    "jsdom": "^25.0.1",
    "npm-run-all2": "^6.2.3",
    "prettier": "^3.3.3",
    "sass": "^1.79.4",
    "sass-loader": "^16.0.2",
    "typescript": "~5.5.4",
    "vite": "^5.4.8",
    "vite-plugin-vue-devtools": "^7.4.6",
    "vitest": "^2.1.2",
    "vue-loader": "^17.4.2",
    "vue-tsc": "^2.1.6"
  }
}
</file>

<file path="playwright.config.ts">
import process from 'node:process'
import { defineConfig, devices } from '@playwright/test'

/**
 * Read environment variables from file.
 * https://github.com/motdotla/dotenv
 */
// require('dotenv').config();

/**
 * See https://playwright.dev/docs/test-configuration.
 */
export default defineConfig({
  testDir: './e2e',
  /* Maximum time one test can run for. */
  timeout: 30 * 1000,
  expect: {
    /**
     * Maximum time expect() should wait for the condition to be met.
     * For example in `await expect(locator).toHaveText();`
     */
    timeout: 5000
  },
  /* Fail the build on CI if you accidentally left test.only in the source code. */
  forbidOnly: !!process.env.CI,
  /* Retry on CI only */
  retries: process.env.CI ? 2 : 0,
  /* Opt out of parallel tests on CI. */
  workers: process.env.CI ? 1 : undefined,
  /* Reporter to use. See https://playwright.dev/docs/test-reporters */
  reporter: 'html',
  /* Shared settings for all the projects below. See https://playwright.dev/docs/api/class-testoptions. */
  use: {
    /* Maximum time each action such as `click()` can take. Defaults to 0 (no limit). */
    actionTimeout: 0,
    /* Base URL to use in actions like `await page.goto('/')`. */
    baseURL: process.env.CI ? 'http://localhost:4173' : 'http://localhost:5173',

    /* Collect trace when retrying the failed test. See https://playwright.dev/docs/trace-viewer */
    trace: 'on-first-retry',

    /* Only on CI systems run the tests headless */
    headless: !!process.env.CI
  },

  /* Configure projects for major browsers */
  projects: [
    {
      name: 'chromium',
      use: {
        ...devices['Desktop Chrome']
      }
    },
    {
      name: 'firefox',
      use: {
        ...devices['Desktop Firefox']
      }
    },
    {
      name: 'webkit',
      use: {
        ...devices['Desktop Safari']
      }
    }

    /* Test against mobile viewports. */
    // {
    //   name: 'Mobile Chrome',
    //   use: {
    //     ...devices['Pixel 5'],
    //   },
    // },
    // {
    //   name: 'Mobile Safari',
    //   use: {
    //     ...devices['iPhone 12'],
    //   },
    // },

    /* Test against branded browsers. */
    // {
    //   name: 'Microsoft Edge',
    //   use: {
    //     channel: 'msedge',
    //   },
    // },
    // {
    //   name: 'Google Chrome',
    //   use: {
    //     channel: 'chrome',
    //   },
    // },
  ],

  /* Folder for test artifacts such as screenshots, videos, traces, etc. */
  // outputDir: 'test-results/',

  /* Run your local dev server before starting the tests */
  webServer: {
    /**
     * Use the dev server by default for faster feedback loop.
     * Use the preview server on CI for more realistic testing.
     * Playwright will re-use the local server if there is already a dev-server running.
     */
    command: process.env.CI ? 'npm run preview' : 'npm run dev',
    port: process.env.CI ? 4173 : 5173,
    reuseExistingServer: !process.env.CI
  }
})
</file>

<file path="README.md">
# vue-lottery-app

This template should help get you started developing with Vue 3 in Vite.

## Recommended IDE Setup

[VSCode](https://code.visualstudio.com/) + [Volar](https://marketplace.visualstudio.com/items?itemName=Vue.volar) (and disable Vetur).

## Type Support for `.vue` Imports in TS

TypeScript cannot handle type information for `.vue` imports by default, so we replace the `tsc` CLI with `vue-tsc` for type checking. In editors, we need [Volar](https://marketplace.visualstudio.com/items?itemName=Vue.volar) to make the TypeScript language service aware of `.vue` types.

## Customize configuration

See [Vite Configuration Reference](https://vite.dev/config/).

## Project Setup

```sh
npm install
```

### Compile and Hot-Reload for Development

```sh
npm run dev
```

### Type-Check, Compile and Minify for Production

```sh
npm run build
```

### Run Unit Tests with [Vitest](https://vitest.dev/)

```sh
npm run test:unit
```

### Run End-to-End Tests with [Playwright](https://playwright.dev)

```sh
# Install browsers for the first run
npx playwright install

# When testing on CI, must build the project first
npm run build

# Runs the end-to-end tests
npm run test:e2e
# Runs the tests only on Chromium
npm run test:e2e -- --project=chromium
# Runs the tests of a specific file
npm run test:e2e -- tests/example.spec.ts
# Runs the tests in debug mode
npm run test:e2e -- --debug
```

### Lint with [ESLint](https://eslint.org/)

```sh
npm run lint
```
</file>

<file path="repopack.config.json">
{
  "output": {
    "filePath": "repopack-output.xml",
    "style": "xml",
    "removeComments": false,
    "removeEmptyLines": false,
    "topFilesLength": 5,
    "showLineNumbers": false
  },
  "include": [],
  "ignore": {
    "useGitignore": true,
    "useDefaultPatterns": true,
    "customPatterns": []
  },
  "security": {
    "enableSecurityCheck": true
  }
}
</file>

<file path="src/App.vue">
<script setup lang="ts">
import RegistrationForm from './components/RegistrationForm.vue'
import WinnersBlock from './components/WinnersBlock.vue'
import UsersTable from './components/UsersTable.vue'
</script>

<template>
  <div class="container mt-5 custom-container">
    <WinnersBlock />
    <RegistrationForm />
    <UsersTable />
  </div>
</template>

<style scoped>
.custom-container {
  max-width: 800px;
  margin: 0 auto;
}
</style>
</file>

<file path="src/assets/base.css">
/* color palette from <https://github.com/vuejs/theme> */
:root {
  --vt-c-white: #ffffff;
  --vt-c-white-soft: #f8f8f8;
  --vt-c-white-mute: #f2f2f2;

  --vt-c-black: #181818;
  --vt-c-black-soft: #222222;
  --vt-c-black-mute: #282828;

  --vt-c-indigo: #2c3e50;

  --vt-c-divider-light-1: rgba(60, 60, 60, 0.29);
  --vt-c-divider-light-2: rgba(60, 60, 60, 0.12);
  --vt-c-divider-dark-1: rgba(84, 84, 84, 0.65);
  --vt-c-divider-dark-2: rgba(84, 84, 84, 0.48);

  --vt-c-text-light-1: var(--vt-c-indigo);
  --vt-c-text-light-2: rgba(60, 60, 60, 0.66);
  --vt-c-text-dark-1: var(--vt-c-white);
  --vt-c-text-dark-2: rgba(235, 235, 235, 0.64);
}

/* semantic color variables for this project */
:root {
  --color-background: var(--vt-c-white);
  --color-background-soft: var(--vt-c-white-soft);
  --color-background-mute: var(--vt-c-white-mute);

  --color-border: var(--vt-c-divider-light-2);
  --color-border-hover: var(--vt-c-divider-light-1);

  --color-heading: var(--vt-c-text-light-1);
  --color-text: var(--vt-c-text-light-1);

  --section-gap: 160px;
}

@media (prefers-color-scheme: dark) {
  :root {
    --color-background: var(--vt-c-black);
    --color-background-soft: var(--vt-c-black-soft);
    --color-background-mute: var(--vt-c-black-mute);

    --color-border: var(--vt-c-divider-dark-2);
    --color-border-hover: var(--vt-c-divider-dark-1);

    --color-heading: var(--vt-c-text-dark-1);
    --color-text: var(--vt-c-text-dark-2);
  }
}

*,
*::before,
*::after {
  box-sizing: border-box;
  margin: 0;
  font-weight: normal;
}

body {
  min-height: 100vh;
  color: var(--color-text);
  background: var(--color-background);
  transition:
    color 0.5s,
    background-color 0.5s;
  line-height: 1.6;
  font-family:
    Inter,
    -apple-system,
    BlinkMacSystemFont,
    'Segoe UI',
    Roboto,
    Oxygen,
    Ubuntu,
    Cantarell,
    'Fira Sans',
    'Droid Sans',
    'Helvetica Neue',
    sans-serif;
  font-size: 15px;
  text-rendering: optimizeLegibility;
  -webkit-font-smoothing: antialiased;
  -moz-osx-font-smoothing: grayscale;
}
</file>

<file path="src/assets/logo.svg">
<svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 261.76 226.69"><path d="M161.096.001l-30.225 52.351L100.647.001H-.005l130.877 226.688L261.749.001z" fill="#41b883"/><path d="M161.096.001l-30.225 52.351L100.647.001H52.346l78.526 136.01L209.398.001z" fill="#34495e"/></svg>
</file>

<file path="src/assets/main.scss">
@import 'bootstrap/scss/bootstrap';
// @import './base.css';

// #app {
//   max-width: 1280px;
//   margin: 0 auto;
//   padding: 2rem;
//   font-weight: normal;
// }

// a,
// .green {
//   text-decoration: none;
//   color: hsla(160, 100%, 37%, 1);
//   transition: 0.4s;
//   padding: 3px;
// }

// @media (hover: hover) {
//   a:hover {
//     background-color: hsla(160, 100%, 37%, 0.2);
//   }
// }

// @media (min-width: 1024px) {
//   body {
//     display: flex;
//     place-items: center;
//   }

//   #app {
//     display: grid;
//     grid-template-columns: 1fr 1fr;
//     padding: 0 2rem;
//   }
// }
</file>

<file path="src/components/__tests__/HelloWorld.spec.ts">
import { describe, it, expect } from 'vitest'

import { mount } from '@vue/test-utils'
import HelloWorld from '../HelloWorld.vue'

describe('HelloWorld', () => {
  it('renders properly', () => {
    const wrapper = mount(HelloWorld, { props: { msg: 'Hello Vitest' } })
    expect(wrapper.text()).toContain('Hello Vitest')
  })
})
</file>

<file path="src/components/__tests__/RegistrationForm.spec.ts">
// RegistrationForm.test.ts
import { render, screen } from '@testing-library/vue'
import userEvent from '@testing-library/user-event'
import { test, expect, vi } from 'vitest'
import RegistrationForm from '@/components/RegistrationForm.vue'
import '@testing-library/jest-dom/vitest'

test('renders registration form with all fields', () => {
  render(RegistrationForm)

  expect(screen.getByLabelText('Name')).toBeInTheDocument()
  expect(screen.getByLabelText('Date of Birth')).toBeInTheDocument()
  expect(screen.getByLabelText('Email')).toBeInTheDocument()
  expect(screen.getByLabelText('Phone number')).toBeInTheDocument()
  expect(screen.getByText('Save')).toBeInTheDocument()
})

test('validates required fields', async () => {
  render(RegistrationForm)

  await userEvent.click(screen.getByText('Save'))

  expect(screen.getByText('Name is required')).toBeInTheDocument()
  expect(screen.getByText('Date of Birth is required')).toBeInTheDocument()
  expect(screen.getByText('Email is required')).toBeInTheDocument()
  expect(screen.getByText('Phone number is required')).toBeInTheDocument()
})

test('validates email format', async () => {
  render(RegistrationForm)

  await userEvent.type(screen.getByLabelText('Email'), 'invalid-email')
  await userEvent.click(screen.getByText('Save'))

  expect(screen.getByText('Invalid email format')).toBeInTheDocument()
})

test('validates phone number format', async () => {
  render(RegistrationForm)

  await userEvent.type(screen.getByLabelText('Phone number'), '123')
  await userEvent.click(screen.getByText('Save'))

  expect(screen.getByText('Invalid phone number format')).toBeInTheDocument()
})

test('validates date of birth is not in the future', async () => {
  render(RegistrationForm)

  const tomorrow = new Date()
  tomorrow.setDate(tomorrow.getDate() + 1)
  await userEvent.type(
    screen.getByLabelText('Date of Birth'),
    tomorrow.toISOString().split('T')[0],
  )
  await userEvent.click(screen.getByText('Save'))

  expect(
    screen.getByText('Date of birth cannot be in the future'),
  ).toBeInTheDocument()
})

test('submits form with valid data', async () => {
  const mockSubmit = vi.fn()
  render(RegistrationForm, {
    props: {
      onSubmit: mockSubmit,
    },
  })

  await userEvent.type(screen.getByLabelText('Name'), 'John Doe')
  await userEvent.type(screen.getByLabelText('Date of Birth'), '1990-01-01')
  await userEvent.type(screen.getByLabelText('Email'), 'john@example.com')
  await userEvent.type(screen.getByLabelText('Phone number'), '1234567890')
  await userEvent.click(screen.getByText('Save'))

  expect(mockSubmit).toHaveBeenCalledWith({
    name: 'John Doe',
    dob: '1990-01-01',
    email: 'john@example.com',
    phone: '1234567890',
  })
})
</file>

<file path="src/components/__tests__/UsersTable.spec.ts">
// UsersTable.test.ts
import { render, screen } from '@testing-library/vue'
import { test, expect } from 'vitest'
import UsersTable from '@/components/UsersTable.vue'
import type { IUser } from '@/models/User'

test('renders users table with correct headers', () => {
  render(UsersTable)

  expect(screen.getByText('#')).toBeInTheDocument()
  expect(screen.getByText('Name')).toBeInTheDocument()
  expect(screen.getByText('Date of Birth')).toBeInTheDocument()
  expect(screen.getByText('Email')).toBeInTheDocument()
  expect(screen.getByText('Phone number')).toBeInTheDocument()
})

test('displays users data correctly', () => {
  const users: IUser[] = [
    {
      name: 'John Doe',
      dateOfBirth: '1990-01-01',
      email: 'john@example.com',
      phone: '1234567890',
    },
    {
      name: 'Jane Smith',
      dateOfBirth: '1995-05-05',
      email: 'jane@example.com',
      phone: '9876543210',
    },
  ]

  render(UsersTable, {
    props: { users },
  })

  users.forEach((user, index) => {
    expect(screen.getByText(user.name)).toBeInTheDocument()
    expect(screen.getByText(user.dateOfBirth)).toBeInTheDocument()
    expect(screen.getByText(user.email)).toBeInTheDocument()
    expect(screen.getByText(user.phone)).toBeInTheDocument()
    expect(screen.getByText((index + 1).toString())).toBeInTheDocument()
  })
})

test('displays empty message when no users', () => {
  render(UsersTable, {
    props: { users: [] },
  })

  expect(screen.getByText('No users registered')).toBeInTheDocument()
})
</file>

<file path="src/components/__tests__/WinnersBlock.spec.ts">
// WinnersBlock.test.ts
import { render, screen } from '@testing-library/vue'
import userEvent from '@testing-library/user-event'
import { test, expect, vi } from 'vitest'
import WinnersBlock from '@/components/WinnersBlock.vue'
import '@testing-library/jest-dom/vitest'

test('renders winners block with new winner button', async () => {
  render(WinnersBlock)

  const input = screen.getByPlaceholderText('Winners')
  expect(input).toBeInTheDocument()

  const button = screen.getByText('New winner')
  expect(button).toBeInTheDocument()
})

test('new winner button is disabled when there are 3 winners', async () => {
  const { rerender } = render(WinnersBlock, {
    props: {
      userNames: ['Winner 1', 'Winner 2', 'Winner 3'],
    },
  })

  const button = screen.getByText('New winner')
  expect(button).toBeDisabled()

  rerender({ winners: ['Winner 1', 'Winner 2'] })
  expect(button).toBeEnabled()
})

test('new winner button is disabled when users list is empty', async () => {
  render(WinnersBlock, {
    props: {
      userNames: [],
    },
  })

  const button = screen.getByText('New winner')
  expect(button).toBeDisabled()
})

test.skip('can remove a winner', async () => {
  const mockRemoveWinner = vi.fn()
  render(WinnersBlock, {
    props: {
      userNames: ['Winner 1'],
      // removeWinner: mockRemoveWinner,
    },
  })

  const removeButton = screen.getByLabelText('Remove Winner 1')
  await userEvent.click(removeButton)

  expect(mockRemoveWinner).toHaveBeenCalledWith('Winner 1')
})
</file>

<file path="src/components/HelloWorld.vue">
<script setup lang="ts">
defineProps<{
  msg: string
}>()
</script>

<template>
  <div class="greetings">
    <h1 class="green">{{ msg }}</h1>
    <h3>
      You’ve successfully created a project with
      <a href="https://vite.dev/" target="_blank" rel="noopener">Vite</a> +
      <a href="https://vuejs.org/" target="_blank" rel="noopener">Vue 3</a>.
    </h3>
  </div>
</template>

<style scoped>
h1 {
  font-weight: 500;
  font-size: 2.6rem;
  position: relative;
  top: -10px;
}

h3 {
  font-size: 1.2rem;
}

.greetings h1,
.greetings h3 {
  text-align: center;
}

@media (min-width: 1024px) {
  .greetings h1,
  .greetings h3 {
    text-align: left;
  }
}
</style>
</file>

<file path="src/components/icons/IconCommunity.vue">
<template>
  <svg
    xmlns="http://www.w3.org/2000/svg"
    width="20"
    height="20"
    fill="currentColor"
  >
    <path
      d="M15 4a1 1 0 1 0 0 2V4zm0 11v-1a1 1 0 0 0-1 1h1zm0 4l-.707.707A1 1 0 0 0 16 19h-1zm-4-4l.707-.707A1 1 0 0 0 11 14v1zm-4.707-1.293a1 1 0 0 0-1.414 1.414l1.414-1.414zm-.707.707l-.707-.707.707.707zM9 11v-1a1 1 0 0 0-.707.293L9 11zm-4 0h1a1 1 0 0 0-1-1v1zm0 4H4a1 1 0 0 0 1.707.707L5 15zm10-9h2V4h-2v2zm2 0a1 1 0 0 1 1 1h2a3 3 0 0 0-3-3v2zm1 1v6h2V7h-2zm0 6a1 1 0 0 1-1 1v2a3 3 0 0 0 3-3h-2zm-1 1h-2v2h2v-2zm-3 1v4h2v-4h-2zm1.707 3.293l-4-4-1.414 1.414 4 4 1.414-1.414zM11 14H7v2h4v-2zm-4 0c-.276 0-.525-.111-.707-.293l-1.414 1.414C5.42 15.663 6.172 16 7 16v-2zm-.707 1.121l3.414-3.414-1.414-1.414-3.414 3.414 1.414 1.414zM9 12h4v-2H9v2zm4 0a3 3 0 0 0 3-3h-2a1 1 0 0 1-1 1v2zm3-3V3h-2v6h2zm0-6a3 3 0 0 0-3-3v2a1 1 0 0 1 1 1h2zm-3-3H3v2h10V0zM3 0a3 3 0 0 0-3 3h2a1 1 0 0 1 1-1V0zM0 3v6h2V3H0zm0 6a3 3 0 0 0 3 3v-2a1 1 0 0 1-1-1H0zm3 3h2v-2H3v2zm1-1v4h2v-4H4zm1.707 4.707l.586-.586-1.414-1.414-.586.586 1.414 1.414z"
    />
  </svg>
</template>
</file>

<file path="src/components/icons/IconDocumentation.vue">
<template>
  <svg
    xmlns="http://www.w3.org/2000/svg"
    width="20"
    height="17"
    fill="currentColor"
  >
    <path
      d="M11 2.253a1 1 0 1 0-2 0h2zm-2 13a1 1 0 1 0 2 0H9zm.447-12.167a1 1 0 1 0 1.107-1.666L9.447 3.086zM1 2.253L.447 1.42A1 1 0 0 0 0 2.253h1zm0 13H0a1 1 0 0 0 1.553.833L1 15.253zm8.447.833a1 1 0 1 0 1.107-1.666l-1.107 1.666zm0-14.666a1 1 0 1 0 1.107 1.666L9.447 1.42zM19 2.253h1a1 1 0 0 0-.447-.833L19 2.253zm0 13l-.553.833A1 1 0 0 0 20 15.253h-1zm-9.553-.833a1 1 0 1 0 1.107 1.666L9.447 14.42zM9 2.253v13h2v-13H9zm1.553-.833C9.203.523 7.42 0 5.5 0v2c1.572 0 2.961.431 3.947 1.086l1.107-1.666zM5.5 0C3.58 0 1.797.523.447 1.42l1.107 1.666C2.539 2.431 3.928 2 5.5 2V0zM0 2.253v13h2v-13H0zm1.553 13.833C2.539 15.431 3.928 15 5.5 15v-2c-1.92 0-3.703.523-5.053 1.42l1.107 1.666zM5.5 15c1.572 0 2.961.431 3.947 1.086l1.107-1.666C9.203 13.523 7.42 13 5.5 13v2zm5.053-11.914C11.539 2.431 12.928 2 14.5 2V0c-1.92 0-3.703.523-5.053 1.42l1.107 1.666zM14.5 2c1.573 0 2.961.431 3.947 1.086l1.107-1.666C18.203.523 16.421 0 14.5 0v2zm3.5.253v13h2v-13h-2zm1.553 12.167C18.203 13.523 16.421 13 14.5 13v2c1.573 0 2.961.431 3.947 1.086l1.107-1.666zM14.5 13c-1.92 0-3.703.523-5.053 1.42l1.107 1.666C11.539 15.431 12.928 15 14.5 15v-2z"
    />
  </svg>
</template>
</file>

<file path="src/components/icons/IconEcosystem.vue">
<template>
  <svg
    xmlns="http://www.w3.org/2000/svg"
    width="18"
    height="20"
    fill="currentColor"
  >
    <path
      d="M11.447 8.894a1 1 0 1 0-.894-1.789l.894 1.789zm-2.894-.789a1 1 0 1 0 .894 1.789l-.894-1.789zm0 1.789a1 1 0 1 0 .894-1.789l-.894 1.789zM7.447 7.106a1 1 0 1 0-.894 1.789l.894-1.789zM10 9a1 1 0 1 0-2 0h2zm-2 2.5a1 1 0 1 0 2 0H8zm9.447-5.606a1 1 0 1 0-.894-1.789l.894 1.789zm-2.894-.789a1 1 0 1 0 .894 1.789l-.894-1.789zm2 .789a1 1 0 1 0 .894-1.789l-.894 1.789zm-1.106-2.789a1 1 0 1 0-.894 1.789l.894-1.789zM18 5a1 1 0 1 0-2 0h2zm-2 2.5a1 1 0 1 0 2 0h-2zm-5.447-4.606a1 1 0 1 0 .894-1.789l-.894 1.789zM9 1l.447-.894a1 1 0 0 0-.894 0L9 1zm-2.447.106a1 1 0 1 0 .894 1.789l-.894-1.789zm-6 3a1 1 0 1 0 .894 1.789L.553 4.106zm2.894.789a1 1 0 1 0-.894-1.789l.894 1.789zm-2-.789a1 1 0 1 0-.894 1.789l.894-1.789zm1.106 2.789a1 1 0 1 0 .894-1.789l-.894 1.789zM2 5a1 1 0 1 0-2 0h2zM0 7.5a1 1 0 1 0 2 0H0zm8.553 12.394a1 1 0 1 0 .894-1.789l-.894 1.789zm-1.106-2.789a1 1 0 1 0-.894 1.789l.894-1.789zm1.106 1a1 1 0 1 0 .894 1.789l-.894-1.789zm2.894.789a1 1 0 1 0-.894-1.789l.894 1.789zM8 19a1 1 0 1 0 2 0H8zm2-2.5a1 1 0 1 0-2 0h2zm-7.447.394a1 1 0 1 0 .894-1.789l-.894 1.789zM1 15H0a1 1 0 0 0 .553.894L1 15zm1-2.5a1 1 0 1 0-2 0h2zm12.553 2.606a1 1 0 1 0 .894 1.789l-.894-1.789zM17 15l.447.894A1 1 0 0 0 18 15h-1zm1-2.5a1 1 0 1 0-2 0h2zm-7.447-5.394l-2 1 .894 1.789 2-1-.894-1.789zm-1.106 1l-2-1-.894 1.789 2 1 .894-1.789zM8 9v2.5h2V9H8zm8.553-4.894l-2 1 .894 1.789 2-1-.894-1.789zm.894 0l-2-1-.894 1.789 2 1 .894-1.789zM16 5v2.5h2V5h-2zm-4.553-3.894l-2-1-.894 1.789 2 1 .894-1.789zm-2.894-1l-2 1 .894 1.789 2-1L8.553.106zM1.447 5.894l2-1-.894-1.789-2 1 .894 1.789zm-.894 0l2 1 .894-1.789-2-1-.894 1.789zM0 5v2.5h2V5H0zm9.447 13.106l-2-1-.894 1.789 2 1 .894-1.789zm0 1.789l2-1-.894-1.789-2 1 .894 1.789zM10 19v-2.5H8V19h2zm-6.553-3.894l-2-1-.894 1.789 2 1 .894-1.789zM2 15v-2.5H0V15h2zm13.447 1.894l2-1-.894-1.789-2 1 .894 1.789zM18 15v-2.5h-2V15h2z"
    />
  </svg>
</template>
</file>

<file path="src/components/icons/IconSupport.vue">
<template>
  <svg
    xmlns="http://www.w3.org/2000/svg"
    width="20"
    height="20"
    fill="currentColor"
  >
    <path
      d="M10 3.22l-.61-.6a5.5 5.5 0 0 0-7.666.105 5.5 5.5 0 0 0-.114 7.665L10 18.78l8.39-8.4a5.5 5.5 0 0 0-.114-7.665 5.5 5.5 0 0 0-7.666-.105l-.61.61z"
    />
  </svg>
</template>
</file>

<file path="src/components/icons/IconTooling.vue">
<!-- This icon is from <https://github.com/Templarian/MaterialDesign>, distributed under Apache 2.0 (https://www.apache.org/licenses/LICENSE-2.0) license-->
<template>
  <svg
    xmlns="http://www.w3.org/2000/svg"
    xmlns:xlink="http://www.w3.org/1999/xlink"
    aria-hidden="true"
    role="img"
    class="iconify iconify--mdi"
    width="24"
    height="24"
    preserveAspectRatio="xMidYMid meet"
    viewBox="0 0 24 24"
  >
    <path
      d="M20 18v-4h-3v1h-2v-1H9v1H7v-1H4v4h16M6.33 8l-1.74 4H7v-1h2v1h6v-1h2v1h2.41l-1.74-4H6.33M9 5v1h6V5H9m12.84 7.61c.1.22.16.48.16.8V18c0 .53-.21 1-.6 1.41c-.4.4-.85.59-1.4.59H4c-.55 0-1-.19-1.4-.59C2.21 19 2 18.53 2 18v-4.59c0-.32.06-.58.16-.8L4.5 7.22C4.84 6.41 5.45 6 6.33 6H7V5c0-.55.18-1 .57-1.41C7.96 3.2 8.44 3 9 3h6c.56 0 1.04.2 1.43.59c.39.41.57.86.57 1.41v1h.67c.88 0 1.49.41 1.83 1.22l2.34 5.39z"
      fill="currentColor"
    ></path>
  </svg>
</template>
</file>

<file path="src/components/RegistrationForm.vue">
<template>
  <div class="card mb-4">
    <div class="card-body">
      <h5 class="card-title text-uppercase">
        <strong>Registration form</strong>
      </h5>
      <p class="card-text">Please fill in all the fields.</p>
      <form class="needs-validation" @submit.prevent="submitForm" novalidate>
        <div class="mb-3">
          <label for="name" class="form-label"><strong>Name</strong></label>
          <input
            type="text"
            class="form-control"
            :class="{ 'is-invalid': errors.name }"
            id="name"
            v-model="user.name"
            placeholder="Enter user name"
          />
          <div class="invalid-feedback" v-if="errors.name">
            {{ errors.name }}
          </div>
        </div>
        <div class="mb-3">
          <label for="dob" class="form-label"
            ><strong>Date of Birth</strong></label
          >
          <input
            type="date"
            class="form-control"
            :class="{ 'is-invalid': user }"
            id="dob"
            v-model="user.dateOfBirth"
            placeholder="yyyy-mm-dd"
          />
          <div class="invalid-feedback" v-if="errors.dateOfBirth">
            {{ errors.dateOfBirth }}
          </div>
        </div>
        <div class="mb-3">
          <label for="email" class="form-label"><strong>Email</strong></label>
          <input
            type="email"
            class="form-control"
            :class="{ 'is-invalid': user }"
            id="email"
            v-model="user.email"
            placeholder="Enter email"
          />
          <div class="invalid-feedback" v-if="errors.email">
            {{ errors.email }}
          </div>
        </div>
        <div class="mb-3">
          <label for="phone" class="form-label"
            ><strong>Phone number</strong></label
          >
          <input
            type="tel"
            class="form-control"
            :class="{ 'is-invalid': user }"
            id="phone"
            v-model="user.phone"
            placeholder="Enter Phone number"
          />
          <div class="invalid-feedback" v-if="errors.phone">
            {{ errors.phone }}
          </div>
        </div>
        <button type="submit" class="btn btn-primary">Save</button>
      </form>
    </div>
  </div>
</template>

<script setup lang="ts">
import { reactive, ref } from 'vue'
import type { IUser } from '@/models/User'
import * as Validator from '@/validations/UserValidations'

// const props = defineProps<{
//   onSubmit: () => void
// }>()

const user = reactive<IUser>(initUser())
const errors = ref<IUser>(initUser())

function initUser(): IUser {
  return {
    name: '',
    email: '',
    dateOfBirth: '',
    phone: '',
  }
}

// const emit = defineEmits({
//   submit(payload: IUser) {
//     if (payload) {
//       return true
//     } else {
//       console.warn('Invalid submit event payload!')
//       return false
//     }
//   },
//   //   submit: (payload: IUser) => {
//   //   if (payload) {
//   //     return true
//   //   } else {
//   //     console.warn('Invalid submit event payload!')
//   //     return false
//   //   }
//   // }
// })

const emit = defineEmits<{
  submit: [user: IUser]
}>()

const validateForm = () => {
  let isValid = true

  errors.value = initUser()

  if (!Validator.isNotEmpty(user.name)) {
    errors.value.name = 'Name is required'
    isValid = false
  }

  if (!Validator.isNotEmpty(user.email)) {
    errors.value.email = 'Email is required'
    isValid = false
  } else if (!Validator.isValidEmail(user.email)) {
    errors.value.email = 'Email is invalid'
    isValid = false
  }

  if (!Validator.isNotEmpty(user.dateOfBirth)) {
    errors.value.dateOfBirth = 'Date of birth is required'
  } else if (!Validator.isDateInPast(user.dateOfBirth)) {
    errors.value.dateOfBirth = 'Date is in future'
  }

  if (!Validator.isNotEmpty(user.phone)) {
    errors.value.dateOfBirth = 'Phone number is required'
  } else if (!Validator.isValidPhone(user.phone)) {
    errors.value.dateOfBirth = 'Phone number is invalid'
  }

  return isValid
}

function submitForm() {
  if (validateForm()) {
    emit('submit', user)
  }
}
</script>

<style scoped></style>
</file>

<file path="src/components/TheWelcome.vue">
<script setup lang="ts">
import WelcomeItem from './WelcomeItem.vue'
import DocumentationIcon from './icons/IconDocumentation.vue'
import ToolingIcon from './icons/IconTooling.vue'
import EcosystemIcon from './icons/IconEcosystem.vue'
import CommunityIcon from './icons/IconCommunity.vue'
import SupportIcon from './icons/IconSupport.vue'
</script>

<template>
  <WelcomeItem>
    <template #icon>
      <DocumentationIcon />
    </template>
    <template #heading>Documentation</template>

    Vue’s
    <a href="https://vuejs.org/" target="_blank" rel="noopener"
      >official documentation</a
    >
    provides you with all information you need to get started.
  </WelcomeItem>

  <WelcomeItem>
    <template #icon>
      <ToolingIcon />
    </template>
    <template #heading>Tooling</template>

    This project is served and bundled with
    <a
      href="https://vite.dev/guide/features.html"
      target="_blank"
      rel="noopener"
      >Vite</a
    >. The recommended IDE setup is
    <a href="https://code.visualstudio.com/" target="_blank" rel="noopener"
      >VSCode</a
    >
    +
    <a
      href="https://github.com/johnsoncodehk/volar"
      target="_blank"
      rel="noopener"
      >Volar</a
    >. If you need to test your components and web pages, check out
    <a href="https://www.cypress.io/" target="_blank" rel="noopener">Cypress</a>
    and
    <a href="https://on.cypress.io/component" target="_blank" rel="noopener"
      >Cypress Component Testing</a
    >.

    <br />

    More instructions are available in <code>README.md</code>.
  </WelcomeItem>

  <WelcomeItem>
    <template #icon>
      <EcosystemIcon />
    </template>
    <template #heading>Ecosystem</template>

    Get official tools and libraries for your project:
    <a href="https://pinia.vuejs.org/" target="_blank" rel="noopener">Pinia</a>,
    <a href="https://router.vuejs.org/" target="_blank" rel="noopener"
      >Vue Router</a
    >,
    <a href="https://test-utils.vuejs.org/" target="_blank" rel="noopener"
      >Vue Test Utils</a
    >, and
    <a href="https://github.com/vuejs/devtools" target="_blank" rel="noopener"
      >Vue Dev Tools</a
    >. If you need more resources, we suggest paying
    <a
      href="https://github.com/vuejs/awesome-vue"
      target="_blank"
      rel="noopener"
      >Awesome Vue</a
    >
    a visit.
  </WelcomeItem>

  <WelcomeItem>
    <template #icon>
      <CommunityIcon />
    </template>
    <template #heading>Community</template>

    Got stuck? Ask your question on
    <a href="https://chat.vuejs.org" target="_blank" rel="noopener">Vue Land</a
    >, our official Discord server, or
    <a
      href="https://stackoverflow.com/questions/tagged/vue.js"
      target="_blank"
      rel="noopener"
      >StackOverflow</a
    >. You should also subscribe to
    <a href="https://news.vuejs.org" target="_blank" rel="noopener"
      >our mailing list</a
    >
    and follow the official
    <a href="https://twitter.com/vuejs" target="_blank" rel="noopener"
      >@vuejs</a
    >
    twitter account for latest news in the Vue world.
  </WelcomeItem>

  <WelcomeItem>
    <template #icon>
      <SupportIcon />
    </template>
    <template #heading>Support Vue</template>

    As an independent project, Vue relies on community backing for its
    sustainability. You can help us by
    <a href="https://vuejs.org/sponsor/" target="_blank" rel="noopener"
      >becoming a sponsor</a
    >.
  </WelcomeItem>
</template>
</file>

<file path="src/components/UsersTable.vue">
<template>
  <div class="card">
    <div class="card-body">
      <table class="table">
        <thead>
          <tr>
            <th>#</th>
            <th>Name</th>
            <th>Date of Birth</th>
            <th>Email</th>
            <th>Phone number</th>
          </tr>
        </thead>
        <tbody>
          <tr v-for="(user, index) in props.users" :key="index">
            <td>{{ index + 1 }}</td>
            <td>{{ user.name }}</td>
            <td>{{ user.dateOfBirth }}</td>
            <td>{{ user.email }}</td>
            <td>{{ user.phone }}</td>
          </tr>
        </tbody>
      </table>
    </div>
  </div>
</template>

<script setup lang="ts">
import type { IUser } from '@/models/User'

const props = defineProps<{
  users: IUser[]
}>()
</script>

<style scoped>
/* Add any additional styles if needed */
</style>
</file>

<file path="src/components/WelcomeItem.vue">
<template>
  <div class="item">
    <i>
      <slot name="icon"></slot>
    </i>
    <div class="details">
      <h3>
        <slot name="heading"></slot>
      </h3>
      <slot></slot>
    </div>
  </div>
</template>

<style scoped>
.item {
  margin-top: 2rem;
  display: flex;
  position: relative;
}

.details {
  flex: 1;
  margin-left: 1rem;
}

i {
  display: flex;
  place-items: center;
  place-content: center;
  width: 32px;
  height: 32px;

  color: var(--color-text);
}

h3 {
  font-size: 1.2rem;
  font-weight: 500;
  margin-bottom: 0.4rem;
  color: var(--color-heading);
}

@media (min-width: 1024px) {
  .item {
    margin-top: 0;
    padding: 0.4rem 0 1rem calc(var(--section-gap) / 2);
  }

  i {
    top: calc(50% - 25px);
    left: -26px;
    position: absolute;
    border: 1px solid var(--color-border);
    background: var(--color-background);
    border-radius: 8px;
    width: 50px;
    height: 50px;
  }

  .item:before {
    content: ' ';
    border-left: 1px solid var(--color-border);
    position: absolute;
    left: 0;
    bottom: calc(50% + 25px);
    height: calc(50% - 25px);
  }

  .item:after {
    content: ' ';
    border-left: 1px solid var(--color-border);
    position: absolute;
    left: 0;
    top: calc(50% + 25px);
    height: calc(50% - 25px);
  }

  .item:first-of-type:before {
    display: none;
  }

  .item:last-of-type:after {
    display: none;
  }
}
</style>
</file>

<file path="src/components/WinnersBlock.vue">
<template>
  <div class="mb-4">
    <div class="input-group">
      <div
        class="bg-white border rounded-start p-2 d-flex align-items-center flex-grow-1"
      >
        <ul class="list-unstyled m-0 d-flex flex-wrap gap-2">
          <li v-for="winner in winners" :key="winner">
            <span class="badge bg-info text-dark d-flex align-items-center">
              {{ winner }}
              <button
                type="button"
                class="btn-close btn-close-white ms-2"
                aria-label="Close"
                @click="removeWinner(winner)"
              ></button>
            </span>
          </li>
        </ul>
      </div>
      <button class="btn btn-primary" type="button" @click="getNewWinner">
        New winner
      </button>
    </div>
  </div>
</template>

<script setup lang="ts">
import { ref } from 'vue'
const props = defineProps<{ userNames: string[] }>()
const winners = ref<string[]>([])
const loosers = ref(props.userNames)

function getNewWinner() {
  const winnerIndex = Math.floor(Math.random() * loosers.value.length)
  winners.value.push(loosers.value[winnerIndex])
  loosers.value.splice(winnerIndex, 1)
}

function removeWinner(username: string) {
  winners.value.filter(winner => username !== winner)
  loosers.value.push(username)
}
</script>
</file>

<file path="src/main.ts">
import './assets/main.scss'

import { createApp } from 'vue'
import { createPinia } from 'pinia'
import App from './App.vue'

const app = createApp(App)

app.use(createPinia())

app.mount('#app')
</file>

<file path="src/models/User.ts">
import * as UserValidations from '@/validations/UserValidations'

export interface IUser {
  name: string
  dateOfBirth: string
  email: string
  phone: string
}

export class User implements IUser {
  #name: string = ''
  #dateOfBirth: string = ''
  #email: string = ''
  #phone: string = ''

  constructor(name: string, dateOfBirth: string, email: string, phone: string) {
    this.name = name
    this.dateOfBirth = dateOfBirth
    this.email = email
    this.phone = phone
  }

  get name(): string {
    return this.#name
  }

  set name(value: string) {
    if (!value || value.trim().length === 0) {
      throw new Error('Name cannot be empty.')
    }
    this.#name = value.trim()
  }

  get dateOfBirth(): string {
    return this.#dateOfBirth
  }

  set dateOfBirth(value: string) {
    if (!UserValidations.isValidDate(value)) {
      throw new Error('Invalid date format.')
    }
    if (!UserValidations.isDateInPast(value)) {
      throw new Error('Date in the future. Enter a past date.')
    }
    this.#dateOfBirth = value
  }

  get email(): string {
    return this.#email
  }

  set email(value: string) {
    if (!UserValidations.isValidEmail(value)) {
      throw new Error('Invalid email format.')
    }
    this.#email = value.toLowerCase()
  }

  get phone(): string {
    return this.#phone
  }

  set phone(value: string) {
    if (!UserValidations.isValidPhone(value)) {
      throw new Error('Invalid phone number format.')
    }
    this.#phone = value
  }
}
</file>

<file path="src/stores/counter.ts">
import { ref, computed } from 'vue'
import { defineStore } from 'pinia'

export const useCounterStore = defineStore('counter', () => {
  const count = ref(0)
  const doubleCount = computed(() => count.value * 2)
  function increment() {
    count.value++
  }

  return { count, doubleCount, increment }
})
</file>

<file path="src/validations/UserValidations.ts">
export function isValidDate(date: string): boolean {
  return !isNaN(Date.parse(date))
}

export function isValidEmail(email: string): boolean {
  const regex = /^[^\s@]+@[^\s@]+\.[^\s@]+$/
  return regex.test(email)
}

export function isValidPhone(phone: string): boolean {
  const regex = /^\+?[\d\s-]{10,}$/
  return regex.test(phone)
}

export function isDateInPast(date: string): boolean {
  const inputDate = new Date(date)
  const currentDate = new Date()
  return inputDate <= currentDate
}

export function isNotEmpty(s: string): boolean {
  return !s.trim()
}
</file>

<file path="tsconfig.app.json">
{
  "extends": "@vue/tsconfig/tsconfig.dom.json",
  "include": ["env.d.ts", "src/**/*", "src/**/*.vue"],
  "exclude": ["src/**/__tests__/*"],
  "compilerOptions": {
    "composite": true,
    "tsBuildInfoFile": "./node_modules/.tmp/tsconfig.app.tsbuildinfo",

    "baseUrl": ".",
    "paths": {
      "@/*": ["./src/*"]
    }
  }
}
</file>

<file path="tsconfig.json">
{
  "files": [],
  "references": [
    {
      "path": "./tsconfig.node.json"
    },
    {
      "path": "./tsconfig.app.json"
    },
    {
      "path": "./tsconfig.vitest.json"
    }
  ]
}
</file>

<file path="tsconfig.node.json">
{
  "extends": "@tsconfig/node20/tsconfig.json",
  "include": [
    "vite.config.*",
    "vitest.config.*",
    "cypress.config.*",
    "nightwatch.conf.*",
    "playwright.config.*"
  ],
  "compilerOptions": {
    "composite": true,
    "noEmit": true,
    "tsBuildInfoFile": "./node_modules/.tmp/tsconfig.node.tsbuildinfo",

    "module": "ESNext",
    "moduleResolution": "Bundler",
    "types": ["node"]
  }
}
</file>

<file path="tsconfig.vitest.json">
{
  "extends": "./tsconfig.app.json",
  "exclude": [],
  "compilerOptions": {
    "composite": true,
    "tsBuildInfoFile": "./node_modules/.tmp/tsconfig.vitest.tsbuildinfo",

    "lib": [],
    "types": ["node", "jsdom"]
  }
}
</file>

<file path="vite.config.ts">
import { fileURLToPath, URL } from 'node:url'

import { defineConfig } from 'vite'
import vue from '@vitejs/plugin-vue'
import vueDevTools from 'vite-plugin-vue-devtools'

// https://vite.dev/config/
export default defineConfig({
  plugins: [
    vue(),
    vueDevTools(),
  ],
  resolve: {
    alias: {
      '@': fileURLToPath(new URL('./src', import.meta.url))
    }
  }
})
</file>

<file path="vitest-setup.ts">
// import '@testing-library/jest-dom/vitest'
</file>

<file path="vitest.config.ts">
import { fileURLToPath } from 'node:url'
import { mergeConfig, defineConfig, configDefaults } from 'vitest/config'
import viteConfig from './vite.config'

export default mergeConfig(
  viteConfig,
  defineConfig({
    test: {
      environment: 'jsdom',
      exclude: [...configDefaults.exclude, 'e2e/**'],
      root: fileURLToPath(new URL('./', import.meta.url)),
      setupFiles: ['./vitest-setup.ts'],
    },
  }),
)
</file>

</repository_files>
